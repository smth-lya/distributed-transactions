services:
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - saga-service
      - order-service
      - inventory-service
      - payment-service
      - seq
    restart: on-failure

  # Saga (orchestrator) service
  saga-service:
    build:
      context: ./src
      dockerfile: DT.Saga.Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__POSTGRES_CONNECTION: Host=saga-postgres;Port=5432;Database=sagadb;Username=postgres;Password=postgres
    depends_on:
      saga-postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  saga-postgres:
    image: postgres:latest
    ports:
      - "5530:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: sagadb
    volumes:
      - saga_postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: on-failure
  saga-outbox:
    build:
      context: ./src
      dockerfile: DT.Saga.Outbox.Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__POSTGRES_CONNECTION: Host=saga-postgres;Port=5432;Database=sagadb;Username=postgres;Password=postgres
    depends_on:
      - saga-service

  coordinator:
    build:
      context: ./src
      dockerfile: DT.CoordinatorNode.Dockerfile
    depends_on:
      - order-service
      - inventory-service
      - payment-service

  # Order service
  order-service:
    build:
      context: ./src
      dockerfile: DT.Orders.Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:5001
      ConnectionStrings__POSTGRES_CONNECTION: Host=order-postgres;Port=5432;Database=orderdb;Username=postgres;Password=postgres
      RABBITMQ_HOST: rabbitmq
    depends_on:
      order-postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  order-postgres:
    image: postgres:latest
    ports:
      - "5531:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orderdb
    volumes:
      - order_postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: on-failure
  order-outbox:
    build:
      context: ./src
      dockerfile: DT.Orders.Outbox.Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__POSTGRES_CONNECTION: Host=order-postgres;Port=5432;Database=orderdb;Username=postgres;Password=postgres
      RABBITMQ_HOST: rabbitmq
    depends_on:
      - order-service

  # Inventory service
  inventory-service:
    build:
      context: ./src
      dockerfile: DT.Inventories.Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:5002
      ConnectionStrings__POSTGRES_CONNECTION: Host=inventory-postgres;Port=5432;Database=inventorydb;Username=postgres;Password=postgres
    depends_on:
      inventory-postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  inventory-postgres:
    image: postgres:latest
    ports:
      - "5532:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: inventorydb
    volumes:
      - inventory_postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: on-failure
  inventory-outbox:
    build:
      context: ./src
      dockerfile: DT.Inventories.Outbox.Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__POSTGRES_CONNECTION: Host=inventory-postgres;Port=5432;Database=inventorydb;Username=postgres;Password=postgres
      RABBITMQ_HOST: rabbitmq
    depends_on:
      - inventory-service
  
  # Payment service  
  payment-service:
    build:
      context: ./src
      dockerfile: DT.Payments.Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:5003
      ConnectionStrings__POSTGRES_CONNECTION: Host=payment-postgres;Port=5432;Database=paymentdb;Username=postgres;Password=postgres
    depends_on:
      payment-postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  payment-postgres:
    image: postgres:latest
    ports:
      - "5533:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: paymentdb
    volumes:
      - payment_postgres:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: on-failure
  payment-outbox:
    build:
      context: ./src
      dockerfile: DT.Payments.Outbox.Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__POSTGRES_CONNECTION: Host=payment-postgres;Port=5432;Database=paymentdb;Username=postgres;Password=postgres
      RABBITMQ_HOST: rabbitmq
    depends_on:
      - payment-service

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  seq:
    image: datalust/seq:latest
    ports: 
      - "5341:5341"
      - "8081:80"
    environment:
      - ACCEPT_EULA=Y
    volumes:
      - seq_data:/data
#
#  redis:
#    image: redis:7
#    networks:
#      - backend
#    ports:
#      - "6379:6379"

  # Observability
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8888:8888"   # Prometheus metrics endpoint
      - "13133:13133" # Health check
    restart: on-failure
    depends_on:
      - jaeger

  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
      COLLECTOR_OTLP-ENABLED: "true"
    ports:
      - "16686:16686" # UI
      - "14268:14268" # Collector HTTP
      - "14250:14250" # Collector gRPC
    restart: on-failure

  # prometheus:
  #   image: prom/prometheus
  #   user: "1000"
  #   volumes:
  #     - ./infra/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - postgres_data:/prometheus
  #   ports:
  #     - "9090:9090"
  #   networks:
  #     - backend
  #     - frontend
  #   command:
  #   - '--storage.tsdb.path=/prometheus'
  #   - '--web.console.templates=/etc/prometheus/consoles'
  #   - '--web.console.libraries=/etc/prometheus/console_libraries'
  #   - '--config.file=/etc/prometheus/prometheus.yml'
  #   - '--query-log-file='

  # grafana:
  #   image: grafana/grafana
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - frontend
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   depends_on:
  #     - prometheus

  # loki:
  #   image: grafana/loki:latest
  #   ports:
  #     - "3100:3100"
  #   networks:
  #     - backend

  # promtail:
  #   image: grafana/promtail:latest
  #   volumes:
  #     - /var/log:/var/log
  #     - ./infra/promtail-config.yml:/etc/promtail/config.yml:ro
  #   command: -config.file=/etc/promtail/config.yml
  #   networks:
  #     - backend

volumes:
  saga_postgres:
  order_postgres:
  inventory_postgres:
  payment_postgres:
  rabbitmq_data:
  seq_data: