// <auto-generated />
using System;
using DT.Saga.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DT.Saga.Infrastructure.Database.Migrations
{
    [DbContext(typeof(SagaDbContext))]
    partial class SagaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DT.Saga.Domain.Models.SagaCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CommandType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("command_type");

                    b.Property<Guid>("CorrelationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("payload");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CorrelationId", "Status")
                        .HasDatabaseName("idx_saga_commands_correlation_status");

                    b.ToTable("saga_commands", "saga");
                });

            modelBuilder.Entity("DT.Saga.Domain.Models.SagaEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CorrelationId")
                        .HasColumnType("uuid");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("event_type");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("payload");

                    b.HasKey("Id");

                    b.HasIndex("CorrelationId", "IsProcessed")
                        .HasDatabaseName("idx_saga_events_correlation_processed");

                    b.ToTable("saga_events", "saga");
                });

            modelBuilder.Entity("DT.Saga.Domain.Models.SagaState", b =>
                {
                    b.Property<Guid>("CorrelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("correlation_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<string>("CurrentState")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("current_state");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<string>("SagaType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("saga_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CorrelationId");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("idx_saga_states_order_id");

                    b.HasIndex("SagaType", "IsCompleted")
                        .HasDatabaseName("idx_saga_states_type_completed");

                    b.ToTable("saga_states", "saga");
                });

            modelBuilder.Entity("DT.Saga.Domain.Models.SagaCommand", b =>
                {
                    b.HasOne("DT.Saga.Domain.Models.SagaState", "Saga")
                        .WithMany("Commands")
                        .HasForeignKey("CorrelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_saga_commands_states");

                    b.Navigation("Saga");
                });

            modelBuilder.Entity("DT.Saga.Domain.Models.SagaEvent", b =>
                {
                    b.HasOne("DT.Saga.Domain.Models.SagaState", "Saga")
                        .WithMany("Events")
                        .HasForeignKey("CorrelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_saga_events_states");

                    b.Navigation("Saga");
                });

            modelBuilder.Entity("DT.Saga.Domain.Models.SagaState", b =>
                {
                    b.Navigation("Commands");

                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
